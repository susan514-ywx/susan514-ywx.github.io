{"meta":{"title":"Susan","subtitle":"","description":"","author":"Susan","url":"https://susan514-ywx.github.io","root":"/"},"pages":[],"posts":[{"title":"过河卒","slug":"bolg2","date":"2020-01-18T08:19:11.379Z","updated":"2020-01-18T09:23:13.018Z","comments":true,"path":"2020/01/18/bolg2/","link":"","permalink":"https://susan514-ywx.github.io/2020/01/18/bolg2/","excerpt":"","text":"过河卒 动态规划（递推？） 递归 人用迭代，神用递归 棋盘上A点有一个过河卒，需要走到目标B点。卒行走的规则：可以向下、或者向右。同时在棋盘上的某一点有一个对方的马（如C点），该马所在的点和所有跳跃一步可达的点称为对方马的控制点，如图3-1中的C点和P1，……，P8，卒不能通过对方马的控制点。棋盘用坐标表示，A点(0,0)、B点(n, m) (n,m为不超过20的整数),同样马的位置坐标是需要给出的，C≠A且C≠B。现在要求你计算出卒从A点能够到达B点的路径的条数。 【输入】给出n、m和C点的坐标。【输出】从A点能够到达B点的路径的条数。【输入样例】8 6 0 4【输出样例】1617 #include&lt;stdio.h&gt; int main() { int n,m,x,y; //马有9个控制点 int a[9]={0,-2,-2,-1,-1,1,1,2,2};//控制行坐标 int b[9]={0,1,-1,2,-2,2,-2,1,-1};//控制纵坐标 int map[21][21]; long long step[21][21]={0};//step[i][j]表示到(i,J)点的控制数 int i,j; scanf(&quot;%d%d%d%d&quot;,&amp;n,&amp;m,&amp;x,&amp;y); for(i=0;i&lt;21;i++) for(j=0;j&lt;21;j++) map[i][j]=1;//标记地图，1表可走 for(i=0;i&lt;9;i++) if(x+a[i]&gt;=0&amp;&amp;x+a[i]&lt;=n&amp;&amp;y+b[i]&gt;=0&amp;&amp;y+b[i]&lt;=m) map[x+a[i]][y+b[i]]=0;//标记马的控制点，0表不可走 //第一行的控制数 for(i=0;i&lt;21;i++) if(map[0][i]) step[0][i]=1; else break;//遇到马的控制点，停止遍历 //第一列控制数 for(i=0;i&lt;21;i++) if(map[i][0]) step[i][0]=1; else break; //从（1，1）点开始，用递推法，求点（i，j)的控制数 for(i=1;i&lt;=n;i++) for(j=1;j&lt;=m;j++) step[i][j]=step[i-1][j]*map[i-1][j]+step[i][j-1]*map[i][j-1];//递推公式，如果map为0则该步不可走 printf(&quot;%lld&quot;,step[n][m]); }全局变量，全局数组默认值为0，局部为随机值 递推与递归的区别相对于递归算法,递推算法免除了数据进出栈的过程，也就是说,不需要函数不断的向边界值靠拢,而直接从边界出发,直到求出函数值 比如阶乘函数：f(n)=nf(n-1)在f(3)的运算过程中,递归的数据流动过程如下:f(3){f(i)=f(i-1)i}–&gt;f(2)–&gt;f(1)–&gt;f(0){f(0)=1}–&gt;f(1)–&gt;f(2)–f(3){f(3)=6}而递推如下:f(0)–&gt;f(1)–&gt;f(2)–&gt;f(3)由此可见,递推的效率要高一些,在可能的情况下应尽量使用递推.但是递归作为比较基础的算法,它的作用不能忽视.所以,在把握这两种算法的时候应该特别注意。","categories":[],"tags":[]},{"title":"Hello World","slug":"hello-world","date":"2020-01-13T03:53:06.273Z","updated":"2020-01-13T04:12:40.810Z","comments":true,"path":"2020/01/13/hello-world/","link":"","permalink":"https://susan514-ywx.github.io/2020/01/13/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Hello HexoQuick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]}]}